(defun first-board ()
  (let ((board (make-array '(9 9) :initial-element 'empty)))
    (dotimes (x 9)
      (setf (aref board 6 x) '(fu .down)))
    (setf (aref board 8 0) '(kyo . down))
    (setf (aref board 8 1) '(kei . down))
    (setf (aref board 8 2) '(gin . down))
    (setf (aref board 8 3) '(kin . down))
    (setf (aref board 8 4) '(gyoku . down))
    (setf (aref board 8 5) '(kin . down))
    (setf (aref board 8 6) '(gin . down))
    (setf (aref board 8 7) '(kei . down))
    (setf (aref board 8 8) '(kyo . down))
    (setf (aref board 7 1) '(kaku . down))
    (setf (aref board 7 7) '(hi . down))
    (dotimes (x 9)
      (setf (aref board 2 x) '(fu . up))) 
    (setf (aref board 0 0) '(kyo . up))
    (setf (aref board 0 1) '(kei . up))
    (setf (aref board 0 2) '(gin . up))
    (setf (aref board 0 3) '(kin . up))
    (setf (aref board 0 4) '(ou . up))
    (setf (aref board 0 5) '(kin . up))
    (setf (aref board 0 6) '(gin . up))
    (setf (aref board 0 7) '(kei . up))
    (setf (aref board 0 8) '(kyo . up))
    (setf (aref board 1 1) '(hi . up))
    (setf (aref board 1 7) '(kaku . up))
    board))

(defun koma-kanji (x)
  (case x
    (ou "王") (gyoku "玉") (hi "飛") (kaku "角") (fu "歩")
    (kyo "香") (kei "桂") (gin "銀") (kin "金") (tokin "と")
    (narikyo "杏") (narikei "圭") (narigin "全") (uma "馬") (ryu "龍")))

(defun look-board (board)
  (dotimes (y 9)
    (dotimes (x 9)
      (let ((p (aref board y x)))
        (if (eq p 'empty)
            (princ "ー")
            (princ (koma-kanji (car (aref board y x))))))
      (princ " "))
    (fresh-line)))
